selectInput(inputId = "logger",
label = "Datalogger:",
choices = c("Old Control 742",
"Old Control 748",
"Old PV6 001",
"Old PV6 007",
"Old PV8 000",
"Old PV8 003",
"New Control 742",
"New Control 748",
"New PV6 001",
"New PV6 007",
"New PV8 000",
"New PV8 003")),
selectInput(inputId = "meas",
label = "Measurement:",
choices = meas_list,
selected = "Control 742")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: plot ----
plotOutput(outputId = "meterPlot")
)
)
)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Jack's Solar Garden METER Data July 2022"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "logger",
label = "Datalogger:",
choices = c("Old Control 742",
"Old Control 748",
"Old PV6 001",
"Old PV6 007",
"Old PV8 000",
"Old PV8 003",
"New Control 742",
"New Control 748",
"New PV6 001",
"New PV6 007",
"New PV8 000",
"New PV8 003")),
selectInput(inputId = "meas",
label = "Measurement:",
choices = unique(ind_000a$measure),
selected = "Control 742")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: plot ----
plotOutput(outputId = "meterPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output, session) {
x <- reactive({
if(input$logger == "Old Control 742"){
ind_742j
}else if(input$logger == "Old Control 748"){
ind_748j
}else if(input$logger == "Old PV6 001"){
ind_001j
}else if(input$logger == "Old PV6 007"){
ind_007j
}else if(input$logger == "Old PV8 000"){
ind_000j
}else if(input$logger == "Old PV8 003"){
ind_003j
}else if(input$logger == "New Control 742"){
ind_742a
}else if(input$logger == "New Control 748"){
ind_748a
}else if(input$logger == "New PV6 001"){
ind_001a
}else if(input$logger == "New PV6 007"){
ind_007a
}else if(input$logger == "New PV8 000"){
ind_000a
}else if(input$logger == "New PV8 003"){
ind_003a
}
})
meas_list <- reactive({
if(input$meas == "m³/m³ Water Content"){
unique(x$measure)
}else if(input$meas == "mS/cm Bulk EC"){
unique(x$measure)
}else if(input$meas == "mV Battery Voltage"){
unique(x$measure)
}else if(input$meas == "°C Logger Temperature"){
unique(x$measure)
}else if(input$meas == "°C Soil Temperature"){
unique(x$measure)
}else if(input$meas == "% Battery Percent"){
unique(x$measure)
}else if(input$meas == "kPa Reference Pressure"){
unique(x$measure)
}
})
output$meterPlot <- renderPlot({
ggplot(x() %>% filter(measure == input$meas),
aes(date, reading, color = port, group = port))+
geom_line()
})
}
shinyApp(ui, server)
### Set working directory
setwd("C:/meter_jsg")
### Load libraries
library(readxl)
library(tidyverse)
library(shiny)
library(ggplot2)
### Import METER data for beginning July 2022
jul_22_000 <- read_excel("jul_22/z6-12000.xlsx")
jul_22_001 <- read_excel("jul_22/z6-12001.xlsx")
jul_22_003 <- read_excel("jul_22/z6-12003.xlsx")
jul_22_007 <- read_excel("jul_22/z6-12007.xlsx")
jul_22_742 <- read_excel("jul_22/z6-13742.xlsx")
jul_22_748 <- read_excel("jul_22/z6-13748.xlsx")
### Import METER data for beginning July 2022
aug_22_000 <- read_excel("aug_22/z6-12000.xlsx")
aug_22_001 <- read_excel("aug_22/z6-12001.xlsx")
aug_22_003 <- read_excel("aug_22/z6-12003.xlsx")
aug_22_007 <- read_excel("aug_22/z6-12007.xlsx")
aug_22_742 <- read_excel("aug_22/z6-13742.xlsx")
aug_22_748 <- read_excel("aug_22/z6-13748.xlsx")
### Create the function to clean our METER data
meter_cleaner <- function(df){
### Incorporate sub-column names into column names
colnames(df) <- paste0(colnames(df), '_', df[1, ], '_', df[2, ])
df <- df[3:nrow(df), ]
### Pivot the table into an indexed format
df_ind <- df %>%
tidyr::pivot_longer(
cols = !1,
names_to = c("port", "sensor", "measure"),
names_sep = "_",
names_prefix = c("Port ", "TEROS", ""),
values_to = "reading",
values_transform = list(reading = as.numeric))
### Transform Excel dates into dates
df_ind[, 1] <- as.POSIXct(as.numeric(unlist(df_ind[, 1]))*86400, origin = "1899-12-30", tz = "America/Denver")
### Fix date column name
colnames(df_ind) <- c("date", "port", "sensor", "measure", "reading")
### Extract port numbe from the port field
df_ind$port <- substr(df_ind$port, 1, 1)
return(df_ind)
}
### Clean original METER data
ind_000j <- meter_cleaner(jul_22_000)
ind_001j <- meter_cleaner(jul_22_001)
ind_003j <- meter_cleaner(jul_22_003)
ind_007j <- meter_cleaner(jul_22_007)
ind_742j <- meter_cleaner(jul_22_742)
ind_748j <- meter_cleaner(jul_22_748)
### Clean new July 2022 sensor layout METER data
ind_000a <- meter_cleaner(aug_22_000)
ind_001a <- meter_cleaner(aug_22_001)
ind_003a <- meter_cleaner(aug_22_003)
ind_007a <- meter_cleaner(aug_22_007)
ind_742a <- meter_cleaner(aug_22_742)
ind_748a <- meter_cleaner(aug_22_748)
### Remove imported Excel spreadsheets to clean up environment
rm(jul_22_000)
rm(jul_22_001)
rm(jul_22_003)
rm(jul_22_007)
rm(jul_22_742)
rm(jul_22_748)
rm(aug_22_000)
rm(aug_22_001)
rm(aug_22_003)
rm(aug_22_007)
rm(aug_22_742)
rm(aug_22_748)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Jack's Solar Garden METER Data July 2022"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "logger",
label = "Datalogger:",
choices = c("Old Control 742",
"Old Control 748",
"Old PV6 001",
"Old PV6 007",
"Old PV8 000",
"Old PV8 003",
"New Control 742",
"New Control 748",
"New PV6 001",
"New PV6 007",
"New PV8 000",
"New PV8 003")),
selectInput(inputId = "meas",
label = "Measurement:",
choices = unique(ind_000a$measure),
selected = "Control 742")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: plot ----
plotOutput(outputId = "meterPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output, session) {
x <- reactive({
if(input$logger == "Old Control 742"){
ind_742j
}else if(input$logger == "Old Control 748"){
ind_748j
}else if(input$logger == "Old PV6 001"){
ind_001j
}else if(input$logger == "Old PV6 007"){
ind_007j
}else if(input$logger == "Old PV8 000"){
ind_000j
}else if(input$logger == "Old PV8 003"){
ind_003j
}else if(input$logger == "New Control 742"){
ind_742a
}else if(input$logger == "New Control 748"){
ind_748a
}else if(input$logger == "New PV6 001"){
ind_001a
}else if(input$logger == "New PV6 007"){
ind_007a
}else if(input$logger == "New PV8 000"){
ind_000a
}else if(input$logger == "New PV8 003"){
ind_003a
}
})
meas_list <- reactive({
if(input$meas == "m³/m³ Water Content"){
unique(x$measure)
}else if(input$meas == "mS/cm Bulk EC"){
unique(x$measure)
}else if(input$meas == "mV Battery Voltage"){
unique(x$measure)
}else if(input$meas == "°C Logger Temperature"){
unique(x$measure)
}else if(input$meas == "°C Soil Temperature"){
unique(x$measure)
}else if(input$meas == "% Battery Percent"){
unique(x$measure)
}else if(input$meas == "kPa Reference Pressure"){
unique(x$measure)
}
})
output$meterPlot <- renderPlot({
ggplot(x() %>% filter(measure == input$meas),
aes(date, reading, color = port, group = port))+
geom_line()
})
}
shinyApp(ui, server)
# Define server logic required to draw a histogram ----
server <- function(input, output, session) {
x <- reactive({
if(input$logger == "Old Control 742"){
ind_742j
}else if(input$logger == "Old Control 748"){
ind_748j
}else if(input$logger == "Old PV6 001"){
ind_001j
}else if(input$logger == "Old PV6 007"){
ind_007j
}else if(input$logger == "Old PV8 000"){
ind_000j
}else if(input$logger == "Old PV8 003"){
ind_003j
}else if(input$logger == "New Control 742"){
ind_742a
}else if(input$logger == "New Control 748"){
ind_748a
}else if(input$logger == "New PV6 001"){
ind_001a
}else if(input$logger == "New PV6 007"){
ind_007a
}else if(input$logger == "New PV8 000"){
ind_000a
}else if(input$logger == "New PV8 003"){
ind_003a
}
})
meas_list <- reactive({
if(input$meas == "m³/m³ Water Content"){
unique(x$measure)
}else if(input$meas == "mS/cm Bulk EC"){
unique(x$measure)
}else if(input$meas == "mV Battery Voltage"){
unique(x$measure)
}else if(input$meas == "°C Logger Temperature"){
unique(x$measure)
}else if(input$meas == "°C Soil Temperature"){
unique(x$measure)
}else if(input$meas == "% Battery Percent"){
unique(x$measure)
}else if(input$meas == "kPa Reference Pressure"){
unique(x$measure)
}
})
output$meterPlot <- renderPlot({
ggplot(x() %>% filter(measure == input$meas),
aes(date, reading, color = port, group = port))+
geom_line()+
ggtitle(paste0("DATALOGGER: ", input$logger))+
xlab("Date")+
ylab(input$meas)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
rsconnect::setAccountInfo(name='kailepley',
token='8DC8949C8D2048593104C36D072B1ACF',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kailepley', token='8DC8949C8D2048593104C36D072B1ACF', secret='mCejJ5GIi/7To9O4g61aQpmmQCxdvbbSP7PhqpaG')
shinyApp(ui, server)
shinyApp(ui, server)
### Set working directory
setwd("C:/meter_jsg")
### Load libraries
library(readxl)
library(tidyverse)
library(shiny)
library(ggplot2)
### Import METER data for beginning July 2022
jul_22_000 <- read_excel("jul_22/z6-12000.xlsx")
jul_22_001 <- read_excel("jul_22/z6-12001.xlsx")
jul_22_003 <- read_excel("jul_22/z6-12003.xlsx")
jul_22_007 <- read_excel("jul_22/z6-12007.xlsx")
jul_22_742 <- read_excel("jul_22/z6-13742.xlsx")
jul_22_748 <- read_excel("jul_22/z6-13748.xlsx")
### Import METER data for beginning July 2022
aug_22_000 <- read_excel("aug_22/z6-12000.xlsx")
aug_22_001 <- read_excel("aug_22/z6-12001.xlsx")
aug_22_003 <- read_excel("aug_22/z6-12003.xlsx")
aug_22_007 <- read_excel("aug_22/z6-12007.xlsx")
aug_22_742 <- read_excel("aug_22/z6-13742.xlsx")
aug_22_748 <- read_excel("aug_22/z6-13748.xlsx")
### Create the function to clean our METER data
meter_cleaner <- function(df){
### Incorporate sub-column names into column names
colnames(df) <- paste0(colnames(df), '_', df[1, ], '_', df[2, ])
df <- df[3:nrow(df), ]
### Pivot the table into an indexed format
df_ind <- df %>%
tidyr::pivot_longer(
cols = !1,
names_to = c("port", "sensor", "measure"),
names_sep = "_",
names_prefix = c("Port ", "TEROS", ""),
values_to = "reading",
values_transform = list(reading = as.numeric))
### Transform Excel dates into dates
df_ind[, 1] <- as.POSIXct(as.numeric(unlist(df_ind[, 1]))*86400, origin = "1899-12-30", tz = "America/Denver")
### Fix date column name
colnames(df_ind) <- c("date", "port", "sensor", "measure", "reading")
### Extract port numbe from the port field
df_ind$port <- substr(df_ind$port, 1, 1)
return(df_ind)
}
### Clean original METER data
ind_000j <- meter_cleaner(jul_22_000)
ind_001j <- meter_cleaner(jul_22_001)
ind_003j <- meter_cleaner(jul_22_003)
ind_007j <- meter_cleaner(jul_22_007)
ind_742j <- meter_cleaner(jul_22_742)
ind_748j <- meter_cleaner(jul_22_748)
### Clean new July 2022 sensor layout METER data
ind_000a <- meter_cleaner(aug_22_000)
ind_001a <- meter_cleaner(aug_22_001)
ind_003a <- meter_cleaner(aug_22_003)
ind_007a <- meter_cleaner(aug_22_007)
ind_742a <- meter_cleaner(aug_22_742)
ind_748a <- meter_cleaner(aug_22_748)
### Remove imported Excel spreadsheets to clean up environment
rm(jul_22_000)
rm(jul_22_001)
rm(jul_22_003)
rm(jul_22_007)
rm(jul_22_742)
rm(jul_22_748)
rm(aug_22_000)
rm(aug_22_001)
rm(aug_22_003)
rm(aug_22_007)
rm(aug_22_742)
rm(aug_22_748)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Jack's Solar Garden METER Data July 2022"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "logger",
label = "Datalogger:",
choices = c("Old Control 742",
"Old Control 748",
"Old PV6 001",
"Old PV6 007",
"Old PV8 000",
"Old PV8 003",
"New Control 742",
"New Control 748",
"New PV6 001",
"New PV6 007",
"New PV8 000",
"New PV8 003")),
selectInput(inputId = "meas",
label = "Measurement:",
choices = unique(ind_000a$measure),
selected = "Control 742")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: plot ----
plotOutput(outputId = "meterPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output, session) {
x <- reactive({
if(input$logger == "Old Control 742"){
ind_742j
}else if(input$logger == "Old Control 748"){
ind_748j
}else if(input$logger == "Old PV6 001"){
ind_001j
}else if(input$logger == "Old PV6 007"){
ind_007j
}else if(input$logger == "Old PV8 000"){
ind_000j
}else if(input$logger == "Old PV8 003"){
ind_003j
}else if(input$logger == "New Control 742"){
ind_742a
}else if(input$logger == "New Control 748"){
ind_748a
}else if(input$logger == "New PV6 001"){
ind_001a
}else if(input$logger == "New PV6 007"){
ind_007a
}else if(input$logger == "New PV8 000"){
ind_000a
}else if(input$logger == "New PV8 003"){
ind_003a
}
})
meas_list <- reactive({
if(input$meas == "m³/m³ Water Content"){
unique(x$measure)
}else if(input$meas == "mS/cm Bulk EC"){
unique(x$measure)
}else if(input$meas == "mV Battery Voltage"){
unique(x$measure)
}else if(input$meas == "°C Logger Temperature"){
unique(x$measure)
}else if(input$meas == "°C Soil Temperature"){
unique(x$measure)
}else if(input$meas == "% Battery Percent"){
unique(x$measure)
}else if(input$meas == "kPa Reference Pressure"){
unique(x$measure)
}
})
output$meterPlot <- renderPlot({
ggplot(x() %>% filter(measure == input$meas),
aes(date, reading, color = port, group = port))+
geom_line()+
ggtitle(paste0("DATALOGGER: ", input$logger))+
xlab("Date")+
ylab(input$meas)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
libPaths()
library(recolorize)
install.packages(recoloriz)
gc()
# B2 Precision Irrigation Shiny App
library(shiny)
library(shinythemes)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(lubridate)
setwd("C:/Users/Kai Lepley/Box/School/RPi Precision Irrigation/precision_shiny/B2PrecisionIrrigation")
source("ui.R")
source("server.R")
shinyApp(ui, server)
